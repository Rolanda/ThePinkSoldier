
Plus de services NouveauRépondreAutres commandes de réponse  
SupprimerArchiverCourrier indésirableAutres commandes de courrier indésirable  
RangerDéplacer vers Catégories  Autres commandes  
AnnulerSkype1OptionsBenjamin Lopez
benjamin-lopez@hotmail.fr

Rechercher des messages
 
Afficher/Masquer dossiers
Dossiers
Actualiser
Boîte de réception 1
Courrier indésirable 27
Brouillons 2
Messages envoyés 
Afficher/Masquer dossiers  Messages supprimés 
POP 479
Archive 
Trash 
Nouveau dossier
Organiser par   
Afficher : Tous  

09:14
Dusart Clement
 Conserver ce message en haut de votre boîte de réception
Fwd: Projet agile - pacman‏

02/09/2015
Blizzard Entertainment
 Conserver ce message en haut de votre boîte de réception
Benjamin - Entrez dans le Grand Tournoi, la nouvelle extension pour Hearthstone !‏

02/09/2015
cecile.desliers@crous-lille.fr
 Conserver ce message en haut de votre boîte de réception Pièce jointe
Résidences Bachelard et Pythagore : Avis d'échéance‏

02/09/2015
iTunes U
 Conserver ce message en haut de votre boîte de réception
Préparez vos cours pour la rentrée scolaire‏

02/09/2015
GitHub
 Conserver ce message en haut de votre boîte de réception
[GitHub] Subscribed to Rolanda/ThePinkSoldier notifications‏

02/09/2015
Rolanda
 Conserver ce message en haut de votre boîte de réception
Rolanda added you to ThePinkSoldier‏

02/09/2015
GitHub
 Conserver ce message en haut de votre boîte de réception
[GitHub] Your password has changed‏

02/09/2015
GitHub
 Conserver ce message en haut de votre boîte de réception
[GitHub] Please reset your password‏

02/09/2015
icestation - Marketplace d'Amazon.fr
 Conserver ce message en haut de votre boîte de réception
Informations sur une commande de la part du vendeur Amazon icestation (Commande : 171-6110506-8199566)‏

01/09/2015
thomas berneau
 Conserver ce message en haut de votre boîte de réception
L’invitation de thomas berneau n’a pas reçu de réponse de votre part‏

30/08/2015
Mes Alertes vente-privee.com
 Conserver ce message en haut de votre boîte de réception
Levi's® demain sur vente-privee‏

29/08/2015
Babbel.com
 Conserver ce message en haut de votre boîte de réception
Votre demande de mot de passe Babbel‏

29/08/2015
Apple Music
 Conserver ce message en haut de votre boîte de réception
Apple Music Festival : vibrez au rythme des grands noms de la musique‏

29/08/2015
Amazon.fr
 Conserver ce message en haut de votre boîte de réception
Promotions du moment‏

27/08/2015
thomas berneau
 Conserver ce message en haut de votre boîte de réception
Benjamin, merci de m’ajouter à votre réseau LinkedIn‏

27/08/2015
LMDE - Centre 601
 Conserver ce message en haut de votre boîte de réception
Votre Sécu LMDE, nos engagements pour 2015-2016‏

26/08/2015
Uber Lille
 Conserver ce message en haut de votre boîte de réception
Souriez, uberX vous accompagne à Lille pour la rentrée !‏

26/08/2015
Amazon.fr
 Conserver ce message en haut de votre boîte de réception
Votre commande Amazon.fr pour "Eastpak Padded Pak'R Sac ..." a été expédiée.‏

25/08/2015
Amazon.fr Marketplace
 Conserver ce message en haut de votre boîte de réception
Benjamin Lopez, voulez-vous évaluer votre transaction sur Amazon.fr ?‏

25/08/2015
Coursera
 Conserver ce message en haut de votre boîte de réception
Hi Benjamin Lopez, we have recommended courses for you‏

23/08/2015
Mes Alertes vente-privee.com
 Conserver ce message en haut de votre boîte de réception
Free demain sur vente-privee‏

22/08/2015
Amazon.fr
 Conserver ce message en haut de votre boîte de réception
Votre code promotionnel sur Amazon.fr‏

22/08/2015
confirmation-commande@amazon.fr
 Conserver ce message en haut de votre boîte de réception
Votre commande Amazon.fr de "Eastpak Padded Pak'R Sac ..."‏

22/08/2015
App Store
 Conserver ce message en haut de votre boîte de réception
Découvrez des apps incroyables pour vos enfants‏

22/08/2015
Amazon.fr
 Conserver ce message en haut de votre boîte de réception
Promotions du moment‏

20/08/2015
Coursera
 Conserver ce message en haut de votre boîte de réception
Download the Coursera App for Mobile‏

20/08/2015
Mes Alertes vente-privee.com
 Conserver ce message en haut de votre boîte de réception
Celio‏

18/08/2015
Ludovic Pastre (via Twitter)
 Conserver ce message en haut de votre boîte de réception
Ludovic Pastre (@batmic44) est sur Twitter !‏

15/08/2015
Apple Music
 Conserver ce message en haut de votre boîte de réception
Rejoignez les fans de musique du monde entier.‏

15/08/2015
Amazon.fr
 Conserver ce message en haut de votre boîte de réception
Promotions du moment‏

14/08/2015
Apple
 Conserver ce message en haut de votre boîte de réception
Apple Watch. L'essayer, c'est l'adorer.‏

13/08/2015
Amazon.fr Commentaires
 Conserver ce message en haut de votre boîte de réception
Benjamin, 'Apple iPhone 4S 16 Go Noir' vous a-t-il plu ? Faites un commentaire sur Amazon.fr‏

11/08/2015
Apple
 Conserver ce message en haut de votre boîte de réception
Achetez un Mac pour vos études. Recevez un casque Beats.‏

10/08/2015
Amazon.fr
 Conserver ce message en haut de votre boîte de réception
Votre commande Amazon.fr pour "VEO | Câble USB, recharge..." a été expédiée.‏

10/08/2015
Benjamin Lopez
 Conserver ce message en haut de votre boîte de réception
AppInfo Export - Packages - Simple list‏
Page 1
Atteindre
Première page
Page précédente
Page suivante
Dernière page
Message précédentMessage suivantVue complète
Fwd: Projet agile - pacman‏


Fwd: Projet agile - pacman
Dusart Clement (dusart.clement@gmail.com)  Ajouter aux contacts  09:14   Conserver ce message en haut de votre boîte de réception  
À : benjamin-lopez@hotmail.fr
dusart.clement@gmail.com
Pour votre sécurité, certains éléments contenus dans ce message ont été bloqués.
Afficher le contenu|Je fais confiance à dusart.clement@gmail.com. Toujours afficher le contenu.


---------- Forwarded message ---------
From: Yann SECQ <yann.secq@univ-lille1.fr>
Date: mer. 2 sept. 2015 à 23:30
Subject: Re: Projet agile - pacman
To: Dusart Clement <clement.dusart@etudiant.univ-lille1.fr>


Le 02/09/2015 16:52, Dusart Clement a écrit :
> Comme demandé, je vous envoie un mail pour vous demander le code source
> de l'ap.jar pour la capture de touche a la volé.

Copier/coller de la partie de la classe Program qui gère la capture
de touche à la volée:

--
    private boolean listeningConsole = false;
     private Thread keyboardListener;

     public void enableKeyTypedInConsole(boolean on) {
         if (!listeningConsole && on) {
             listeningConsole = true;
             keyboardListener = new Thread() {
                 public void run() {
                     try {
                         String[] cmd = {"/bin/sh", "-c", "stty raw
</dev/tty"};
                         Runtime.getRuntime().exec(cmd).waitFor();
                         Console console = System.console();
                         Reader reader = console.reader();
                         while (listeningConsole) {
                             int c = reader.read();
                             if (c == 27) { // ESC
                                 c = reader.read();
                                 if (c == 91) { // [
                                     c = reader.read(); // directional
arrow !
                                     switch (c) { // surcharging DC1-4 ...
                                         case 65:
                                             keyTypedInConsole(ANSI_UP);
                                             break;
                                         case 66:
                                             keyTypedInConsole(ANSI_DOWN);
                                             break;
                                         case 67:
                                             keyTypedInConsole(ANSI_RIGHT);
                                             break;
                                         case 68:
                                             keyTypedInConsole(ANSI_LEFT);
                                             break;
                                     }
                                 } else {
                                     //System.err.println("Unknown ANSI
code : "+c);
                                 }
                             } else {
                                 keyTypedInConsole((char) c);
                             }
                             Thread.sleep(100);
                         }
                         reader.close();
                     } catch (IOException ioe) {
                         ioe.printStackTrace();
                     } catch (InterruptedException ie) {
                         ie.printStackTrace();
                     }
                 }
             };
             keyboardListener.start();
         } else {
             listeningConsole = false;
             try {
                 String[] cmd = new String[]{"/bin/sh", "-c", "stty sane
</dev/tty"};
                 Runtime.getRuntime().exec(cmd).waitFor();
             } catch (IOException io) {
                 io.printStackTrace();
             } catch (InterruptedException ioe) {
                 ioe.printStackTrace();
             }
         }
     }

     private void _println(Object o) {
         // HACK: LF does not work in RAW terminal mode :(
         if (listeningConsole) {
             cusp();
             print(o);
             curp();
             down();
         } else {
             System.out.println(o.toString());
         }
     }

     class KeyboardThread implements Runnable {

         public String line = null;
         public final long timeout;

         public KeyboardThread(long timeout) {
             this.timeout = timeout;
         }

         @Override
         public void run() {
             final long start = getTime();
             BufferedReader br = new BufferedReader(new
InputStreamReader(System.in));
             try {
                 // to flush previous inputs !
                 while (br.ready()) {
                     br.readLine();
                 }
                 while (getTime() - start < timeout && line == null) {
                     if (br.ready()) {
                         line = br.readLine();
                     }
                     Thread.sleep(250);
                 }
             } catch (IOException ioe) {
                 throw new RuntimeException("[iJava] IO error while
waiting input with timeout !\n" + ioe.getMessage());
             } catch (InterruptedException ex) {
                 throw new RuntimeException("[iJava] Interruption error
while waiting input with timeout !\n" + ex.getMessage());
             }
         }
     }
--

et tout le paquet de constantes !

--
package ijava;

/**
  * L'interface Curses définie les différentes constantes et fonctions
  * associées aux manipulations de la console (via les codes ANSI). La
  * plupart du temps, il est conseillé d'utiliser plutôt les primitives
  * fournies que de passer directement par les constantes.
  *
  * @author yann.secq@univ-lille1.fr
  */
public interface Curses {
     public static final String ANSI_RESET = "\u001B[0m";
     public static final String ANSI_CURSOR_UP = "\u001B[1A";
     public static final String ANSI_CURSOR_DOWN = "\u001B[1B";
     public static final String ANSI_CURSOR_FORWARD = "\u001B[1C";
     public static final String ANSI_CURSOR_BACK = "\u001B[1D";
     public static final String ANSI_CURSOR_NEXT_LINE = "\u001B[1E";
     public static final String ANSI_CURSOR_PREV_LINE = "\u001B[1F";
     public static final String ANSI_CURSOR_MOVE_TO = "\u001B[3;3H";
     public static final String ANSI_CURSOR_SAVE_POS = "\u001B[s";
     public static final String ANSI_CURSOR_RESTORE_POS = "\u001B[u";
     public static final String ANSI_CURSOR_SHOW = "\u001B[?25h";
     public static final String ANSI_CURSOR_HIDE = "\u001B[?25l";

     /**
      * Réinitialise la console (utile lorsque vous jouez avec les
      * couleurs du texte !). Il est de bon ton d'appeler cette fonction
      * avant de quitter votre programme afin de ne pas modifier la
      * console de l'utilisateur ...
      */
     public void reset();

     /**
      * Affiche le curseur.
      */
     public void show();
     /**
      * Masque le curseur.
      */
     public void hide();

     public static final char ANSI_UP    = 17;
     public static final char ANSI_DOWN  = 18;
     public static final char ANSI_LEFT  = 19;
     public static final char ANSI_RIGHT = 20;

     /**
      * Déplace le curseur vers le haut.
      */
     public void up();
     /**
      * Déplace le curseur de n lignes vers le haut.
      *
      * @param n le nombre de lignes.
      */
     public void up(int n);
     /**
      * Déplace le curseur vers le haut.
      */
     public void down();
     /**
      * Déplace le curseur de n lignes vers le bas.
      *
      * @param n le nombre de lignes.
      */
     public void down(int n);
     /**
      * Déplace le curseur vers la droite.
      */
     public void forward();
     /**
      * Déplace le curseur de n cases vers la droite.
      *
      * @param n nombres de cases vers la droite.
      */
     public void forward(int n);
     /**
      * Déplace le curseur vers la gauche.
      */
     public void backward();
     /**
      * Déplace le curseur de n cases vers la gauche.
      *
      * @param n nombre de cases vers la gauche.
      */
     public void backward(int n);

     /**
      * Sauvegarde la position courante du curseur (CUrsor Save Position).
      */
     public void cusp();
     /**
      * Restaure la position sauvegardée du curseur (CUrsor Restore
Position).
      */
     public void curp();
     /**
      * Positionne le curseur aux coordonnées (line, column).
      *
      * @param line la coordonnée de ligne où positionner le curseur.
      * @param column la coordonnée de colonne où positionner le curseur.
      */
     public void cursor(int line, int column);

     public static final String ANSI_CLEAR_SCREEN_AFTER = "\u001B[0J";
     public static final String ANSI_CLEAR_SCREEN_BEFORE = "\u001B[1J";
     public static final String ANSI_CLEAR_SCREEN_ALL = "\u001B[2J";
     public static final String ANSI_CLEAR_LINE_AFTER = "\u001B[0K";
     public static final String ANSI_CLEAR_LINE_BEFORE = "\u001B[1K";
     public static final String ANSI_CLEAR_LINE_ALL = "\u001B[2K";

     /**
      * Efface la ligne depuis la position jusqu'à la fin de la ligne.
      */
     public void clearEOL();
     /**
      * Efface la ligne depuis le début de la ligne jusqu'au curseur.
      */
     public void clearBOL();
     /**
      * Efface l'ensemble du contenu de la ligne courante.
      */
     public void clearLine();
     /**
      * Efface l'ensemble de l'écran et repositionne le curseur en (1, 1).
      */
     public void clearScreen();

     public static final String ANSI_SCROLL_UP = "\u001B[1S";
     public static final String ANSI_SCROLL_DOWN = "\u001B[1T";
     public static final String ANSI_BOLD = "\u001B[1m";
     public static final String ANSI_FAINT = "\u001B[2m";
     public static final String ANSI_ITALIC = "\u001B[3m";
     public static final String ANSI_UNDERLINE = "\u001B[4m";
     public static final String ANSI_BLINK_SLOW = "\u001B[5m";
     public static final String ANSI_BLINK_FAST = "\u001B[6m";
     public static final String ANSI_NEGATIVE = "\u001B[7m";
     public static final String ANSI_BLACK = "\u001B[30m";
     public static final String ANSI_RED = "\u001B[31m";
     public static final String ANSI_GREEN = "\u001B[32m";
     public static final String ANSI_YELLOW = "\u001B[33m";
     public static final String ANSI_BLUE = "\u001B[34m";
     public static final String ANSI_PURPLE = "\u001B[35m";
     public static final String ANSI_CYAN = "\u001B[36m";
     public static final String ANSI_WHITE = "\u001B[37m";

     /**
      * Défini la couleur de l'affichage du texte.
      *
      * @param color une des couleurs définies dans le tableau ANSI_COLORS.
      */
     public void text(String color);

     public static String[] ANSI_COLORS = new String[]{"black", "red",
"green",
         "yellow", "blue", "purple", "cyan", "white"};

     /**
      * Cette fonction retourne aléatoirement une chaîne de caractère
      * représentant une couleur (parmi les couleurs définies dans le
      * tableau ANSI_COLORS).
      *
      * @return une couleur tirée aléatoirement parmi les couleurs
définies dans
      * le tableau ANSI_COLORS
      */
     public String randomANSIColor();

     /**
      * Défini la couleur de l'affichage du fond du texte.
      *
      * @param color une des couleurs définies dans le tableau ANSI_COLORS.
      */
     public void background(String color);

     public static final String ANSI_TEXT_DEFAULT_COLOR = "\u001B[39m";
     public static final String ANSI_BLACK_BG = "\u001B[40m";
     public static final String ANSI_RED_BG = "\u001B[41m";
     public static final String ANSI_GREEN_BG = "\u001B[42m";
     public static final String ANSI_YELLOW_BG = "\u001B[43m";
     public static final String ANSI_BLUE_BG = "\u001B[44m";
     public static final String ANSI_PURPLE_BG = "\u001B[45m";
     public static final String ANSI_CYAN_BG = "\u001B[46m";
     public static final String ANSI_WHITE_BG = "\u001B[47m";
     public static final String ANSI_BG_DEFAULT_COLOR = "\u001B[49m";

     // Key event management in console mode
     /**
      * Active (true) ou désactive (false) la possibilité de capturer les
      * touches manipulées par l'utilisateur. Pour être notifié des touches
      * manipulées, il faut écrire la fonction 'void
keyTypedInConsole(char c)'.
      * Dès que l'utilisateur appuiera sur une touche, la méthode
'keyTypedInConsole'
      * sera automatiquement appelée avec en paramètre la valeur de la
touche
      * manipulée par l'utilisateur. Les constantes ANSI_UP, ANSI_DOWN,
ANSI_LEFT
      * et ANSI_RIGHT permettent d'identifier les touches directionnelles.
      *
      * @param on activation de la capture (true) ou désactivation (false).
      */
     public void enableKeyTypedInConsole(boolean on);
}
--

Cordialement, YS.

--
yann.secq{at}univ-lille1.fr      | cristal.univ-lille.fr/~secq
Département Informatique IUT "A" | Laboratoire CRISTAL CNRS UMR 9189
Université de Lille - Sciences & Technologies - www.univ-lille1.fr
--
"Ne désespérez jamais. Faites infuser davantage.", Henri Michaux
© 2015 Microsoft Conditions Confidentialité et cookies Développeurs Français
      
